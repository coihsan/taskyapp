model User {
  id                String          @id @default(uuid())
  clerkId           String          @unique
  fullName          String?
  username          String          @unique
  emailUser         String          @unique
  emailVerified     DateTime?
  password          String?
  imageUrl          String?
  phoneNumber       String?         @default("000-0000-0000")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  accounts          Account[]
  notification      Notification[]
  Permissions       Permissions[]
  sessions          Session[]
  profile           ExtendedProfile?
  organizationUser  OrganizationUser[]
  projectsUser      ProjectUser[]
}

model ExtendedProfile {
  id     Int       @id @default(autoincrement())
  userId String    @unique
  status  String @db.Text
  bio    String?
  user   User?     @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  lastSignInAt DateTime?
  lastActiveAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
}

model Permissions {
  id     String  @id @default(uuid())
  email  String  @unique
  userId String
  access Boolean
  user   User    @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
}