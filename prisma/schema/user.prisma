model User {
  id            String          @id @default(uuid())
  clerkId       String         @unique
  firstName      String
  lastName       String
  emailUser        String          @unique
  emailVerified DateTime?
  password      String?
  bio           String[]
  imageUrl      String?
  phoneNumber   String?         @default("000-000-0000")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role?           @default(USER)
  status        Status?         @default(ACTIVE)
  accounts      Account[]
  Attachment    Attachment[]
  Authenticator Authenticator[]
  comments      Comments[]
  Funnel        Funnel[]
  Media         Media[]
  Memos         Memos[]
  notification  Notification[]
  organization  Organization[]
  Permissions   Permissions[]
  projects      Projects[]
  sessions      Session[]
  task          Tasks[]
  teams         Teams[]
  Workflow      Workflows[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Permissions {
  id     String  @id @default(uuid())
  email  String  @unique
  userId String
  access Boolean
  user   User    @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
}