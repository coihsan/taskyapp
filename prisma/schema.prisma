generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  emailVerified DateTime?
  bio           String[]
  avatar        String?
  password      String
  phoneNumber   String?         @default("000-000-0000")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role?           @default(OWNER)
  status        Status?         @default(ACTIVE)
  accounts      Account[]
  Attachment    Attachment[]
  Authenticator Authenticator[]
  comments      Comments[]
  Funnel        Funnel[]
  Media         Media[]
  Memos         Memos[]
  notification  Notification[]
  organization  Organization[]
  Permissions   Permissions[]
  projects      Projects[]
  sessions      Session[]
  task          Tasks[]
  Workflow      Workflows[]
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Permissions {
  id     String  @id @default(uuid())
  email  String  @unique
  userId Int
  access Boolean
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String         @id @default(uuid())
  name         String         @unique
  connectAccountId String?               @default("")
  logo         String?
  subDomainName String?      @unique
  createdAt    DateTime       @default(now()) 
  updatedAt    DateTime       @updatedAt 
  userId       Int
  role         Role           @default(OWNER)
  Invitation   Invitation[]
  notification Notification[]
  createdBy    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects     Projects[]
  teams        Teams[]
}

model Projects {
  id             String         @id @default(uuid())
  name           String
  description    String
  connectAccountId String?      @default("")
  dueDate        DateTime       @default(now()) 
  createdAt      DateTime       @default(now()) 
  updatedAt      DateTime       @updatedAt 
  dueDateFrom    DateTime       
  dueDateTo      DateTime       
  status         TaskStatus
  pathName       String   @default("")
  organizationId String
  userId         Int
  board          Board[]
  Funnel         Funnel[]
  Invitation     Invitation[]
  Media          Media[]
  Memos          Memos[]
  notification   Notification[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Schedule       Schedule[]
  tasks          Tasks[]
  Teams          Teams[]
  workflows      Workflows[]
}

model Board {
  id          String   @id @default(uuid())
  title       String
  description String
  status      String
  projectId   String
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Tasks {
  id          String     @id @default(uuid())
  title       String
  description String
  status      TaskStatus
  projectId   String
  userId      Int
  comments    Comments[]
  substask    Substask[]
  Tags        Tag[]
  project     Projects   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createBy    User       @relation(fields: [userId], references: [id])
  assigned    Teams[]
}

model Substask {
  id          String     @id @default(uuid())
  title       String
  description String
  status      TaskStatus
  taskId      String
  task        Tasks      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tagsId    String
  Tags      Tasks    @relation(fields: [tagsId], references: [id], onDelete: Cascade)
}

model Comments {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  content    String
  userId     Int
  taskId     String
  attachment Attachment[]
  task       Tasks        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id          String   @id @default(uuid())
  title       String
  description String
  link        String   @unique
  commentsId  String
  userId      Int
  comments    Comments @relation(fields: [commentsId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Memos {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String
  article     String
  published   Boolean  @default(false)
  projectId   String
  userId      Int
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Funnel {
  id          String   @id @default(uuid())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  published   Boolean  @default(false)
  projectId   String
  userId      Int
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Media {
  id          String   @id @default(uuid())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String?
  description String
  link        String   @unique
  projectId   String
  userId      Int
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Schedule {
  id          String   @id @default(uuid())
  title       String
  description String
  projectId   String
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Teams {
  id             String       @id @default(uuid())
  name           String
  createdAt      DateTime     @default(now()) 
  status         Status
  organizationId String
  role           Role
  taskId         String
  projectId      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task           Tasks        @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Workflows {
  id        String   @id @default(uuid())
  nodes     String?
  edges     String?
  name      String
  flowPath  String?
  cronPath  String?
  publish   Boolean? @default(false)
  projectId String
  userId    Int
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id             String       @id @default(uuid())
  title          String
  description    String
  status         String
  userId         Int
  organizationId String
  projectId      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id             String       @id @default(uuid())
  email          String       @unique
  role           Role
  organizationId String
  projectId      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum Role {
  STAFF
  OWNER
  VIEW
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  PENDING
  INPROGRESS
  COMPLETED
  ARCHIVE
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}
