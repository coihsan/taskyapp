
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  STAFF
  OWNER
}

enum Status {
  ACTIVE
  INACTIVE
}
enum TaskStatus {
  PENDING
  INPROGRESS
  COMPLETED
  ARCHIVE
}
enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}
model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  username     String         @unique
  name         String
  email        String         @map("email")
  password     String
  phoneNumber  String?          @default("000-000-0000")
  createdAt    DateTime       @default(now()) @db.Date
  updatedAt    DateTime       @updatedAt @db.Date
  projects     Projects[]
  organization Organization[]
  role         Role           @default(OWNER)
  avatar       String?
  notification Notification[]
  status       Status         @default(ACTIVE)
  comments     Comments[]
}

model Organization {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  createdAt       DateTime   @default(now()) @db.Date
  updatedAt       DateTime   @updatedAt @db.Date
  userId          String     @db.ObjectId
  user            User       @relation(fields: [userId], references: [id])
  role            Role
  projects        Projects[]
  teams           Teams[]
  notification    Notification[]
}

model Projects {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  dueDate        DateTime     @default(now()) @db.Date
  createdAt      DateTime     @default(now()) @db.Date
  updatedAt      DateTime     @updatedAt @db.Date
  tasks          Tasks[]
  board          Board[]
  status         Status
  Memos          Memos[]
  Funnel         Funnel[]
  Media          Media[]
  Schedule       Schedule[]
  Teams          Teams[]
  workflows      Workflows[]
  notification   Notification[]
  organizationId String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Board {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  status         String
  projectId      String       @db.ObjectId
  project        Projects     @relation(fields: [projectId], references: [id])
}

model Tasks {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      TaskStatus
  substask    Substask[]
  Tags        Tag[]
  projectId      String       @db.ObjectId
  project        Projects     @relation(fields: [projectId], references: [id])
  assigned    Teams[]
  comments    Comments[]
}
model Substask {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      TaskStatus
  taskId      String @db.ObjectId
  task        Tasks  @relation(fields: [taskId], references: [id])
}
model Tag{
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  color        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tagsId       String     @db.ObjectId
  Tags         Tasks      @relation(fields: [tagsId], references: [id])
}
model Comments{
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  content     String
  attachment  Attachment[]
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  taskId      String     @db.ObjectId
  task        Tasks      @relation(fields: [taskId], references: [id])
}
model Attachment{
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  link         String     @unique
  commentsId  String     @db.ObjectId
  comments    Comments   @relation(fields: [commentsId], references: [id])
}

model Memos {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  status         String
  article        String       @db.String
  published      Boolean      @default(false)
  projectId      String       @db.ObjectId
  project        Projects     @relation(fields: [projectId], references: [id])
}

model Funnel {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  description    String?
  published      Boolean      @default(false)
  projectId      String       @db.ObjectId
  project        Projects     @relation(fields: [projectId], references: [id])
}

model Media {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  type           String?
  description    String
  link           String     @unique
  projectId      String       @db.ObjectId
  project        Projects     @relation(fields: [projectId], references: [id])
}

model Schedule {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  projectId      String       @db.ObjectId
  project        Projects     @relation(fields: [projectId], references: [id])
}

model Teams {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  createdAt      DateTime     @default(now()) @db.Date
  status         Status
  organizationId String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role
  taskId         String       @db.ObjectId
  task           Tasks      @relation(fields: [taskId], references: [id])
  projectId      String       @db.ObjectId
  project        Projects     @relation(fields: [projectId], references: [id])
}
model Workflows {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  nodes             String?
  edges             String?
  name              String
  flowPath          String?
  cronPath          String?
  publish           Boolean? @default(false)
  projectId      String       @db.ObjectId
  project        Projects     @relation(fields: [projectId], references: [id])
}
model Notification {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  description         String
  status              String
  userId              String @db.ObjectId
  user                User   @relation(fields: [userId], references: [id])
  organizationId      String       @db.ObjectId
  organization        Organization @relation(fields: [organizationId], references: [id])
  projectId           String       @db.ObjectId
  project             Projects     @relation(fields: [projectId], references: [id])
}
